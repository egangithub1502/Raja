name: Sync branches with conflict handling

on:
  push:
    branches:
      - '*'

jobs:
  branch-sync:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CHAT_WEBHOOK_URL: "https://chat.googleapis.com/v1/spaces/AAAAiN5o6yI/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=V37-y3Z6RgoenZeoHilnzBw9xmYPEI_O0e33MhaqvQA"
      GH_TOKEN: ${{ secrets.JEGANMERGE }}  # Set GH_TOKEN for GitHub CLI authentication

    permissions:
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git
        run: |
          COMMITTER_NAME=$(git log -1 --pretty=format:'%an')
          COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')
          
          git config --global user.name "$COMMITTER_NAME"
          git config --global user.email "$COMMITTER_EMAIL"
          
          echo "Configured git with user.name=$COMMITTER_NAME and user.email=$COMMITTER_EMAIL"
      
      - name: Determine branch type
        id: determine_branches
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
    
          echo "Branch name: $branch_name"

          case "$branch_name" in
            profit_dep_hf_*)
              BRANCH_TYPE="hf"
              ;;
            profit_dep_minor_*)
              BRANCH_TYPE="minor"
              ;;
            *)
              BRANCH_TYPE="none"
              ;;
          esac
    
          echo "Branch Type: $BRANCH_TYPE"
          echo "branch_name=$branch_name" >> $GITHUB_ENV
          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV

      - name: Create and handle PR
        run: |
          branch_name=${{ env.branch_name }}
          branch_type=${{ env.BRANCH_TYPE }}
          case "$branch_type" in
            hf)
              latest_minor_branch=$(git branch -r | grep 'origin/profit_dep_minor_' | sed 's/origin\///' | sort -r | head -n 1 | xargs)
              
              if [ -z "$latest_minor_branch" ]; then
                echo "No minor branch found for this week. Proceeding to merge HF into master."
                # Merge HF into Master
                git fetch --all
                git checkout master
                git merge --no-commit --no-ff origin/$branch_name || true
                
                if git ls-files -u | grep -q .; then
                  echo "Merge conflict detected."
                  conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
                  committer=$(git log -1 --pretty=format:'%an')
                
                  message="Merge conflict detected when merging HF into master.\nConflicting files:\n$conflict_files\nLast committer: $committer"
                  echo "Sending conflict notification to Google Chat..."
                  curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                  exit 1
                fi
                
                git checkout $branch_name
                
                # Notify that PR creation is about to start
                echo "Notifying Google Chat about PR creation..."
                curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Preparing to create PR: $branch_name into master\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                
                # Create PR from HF to Master
                pr_url=$(gh pr create \
                  --title "Merge $branch_name into master" \
                  --body "This PR merges the changes from $branch_name into master." \
                  --base master \
                  --head "$branch_name" )
              
                echo "PR URL: $pr_url"
                echo "pr_url=$pr_url" >> $GITHUB_ENV
                
                # Notify about the created PR
                echo "Posting PR URL to Google Chat..."
                curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Pull request created: $pr_url\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                
                # Wait for PR to be merged
                pr_number=$(basename "$pr_url")
              
                echo "Waiting for PR #$pr_number to be merged..."
              
                while true; do
                  pr_status=$(gh pr view "$pr_number" --json state -q ".state")
                  echo "Current PR status: $pr_status"
                  if [ "$pr_status" == "MERGED" ]; then
                    echo "PR merged, notifying Google Chat..."
                    curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Merged $branch_name into master up to date\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                    break
                  elif [ "$pr_status" == "CLOSED" ] || [ "$pr_status" == "DRAFT" ]; then
                    echo "PR #$pr_number is not merged yet or is in an unexpected state. Exiting."
                    exit 1
                  fi
                  sleep 30
                done
              else
                echo "Minor branch found: $latest_minor_branch. Proceeding with HF to Minor merge."
                # Existing logic to handle merge from HF to Minor branch
                # (same logic as your original script)
              fi
              ;;
            minor)
              # Fetch latest changes
              git fetch --all
              # Check for conflicts
              git checkout master
              git merge --no-commit --no-ff origin/$branch_name || true
              if git ls-files -u | grep -q .; then
                echo "Merge conflict detected."
                conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
                committer=$(git log -1 --pretty=format:'%an')
                
                message="Merge conflict detected when merging minor into master.\nConflicting files:\n$conflict_files\nLast committer: $committer"
                echo "Sending conflict notification to Google Chat..."
                curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                exit 1
              fi
              
              git checkout $branch_name
              
              # Notify that PR creation is about to start
              echo "Notifying Google Chat about PR creation..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Preparing to create PR: $branch_name into master\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              
              # Create PR from Minor to Master
              pr_url=$(gh pr create \
                --title "Merge $branch_name into master" \
                --body "This PR merges the changes from $branch_name into master." \
                --base master \
                --head "$branch_name" )
              
              echo "PR URL: $pr_url"
              echo "pr_url=$pr_url" >> $GITHUB_ENV
              
              # Notify about the created PR
              echo "Posting PR URL to Google Chat..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Pull request created: $pr_url\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              
              # Wait for PR to be merged
              pr_number=$(basename "$pr_url")
              
              echo "Waiting for PR #$pr_number to be merged..."
              
              while true; do
                pr_status=$(gh pr view "$pr_number" --json state -q ".state")
                echo "Current PR status: $pr_status"
                if [ "$pr_status" == "MERGED" ]; then
                  echo "PR merged, notifying Google Chat..."
                  curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Merged $branch_name into master up to date\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                  curl -X POST -H 'Content-Type: application/json' --data '{"text": "Minor into Master merged."}' "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                  break
                elif [ "$pr_status" == "CLOSED" ] || [ "$pr_status" == "DRAFT" ]; then
                  echo "PR #$pr_number is not merged yet or is in an unexpected state. Exiting."
                  exit 1
                fi
                sleep 30
              done
              ;;
            *)
              echo "No action required for this branch: $branch_name"
              exit 0
              ;;
          esac
