name: Sync branches with conflict handling

on:
  push:
    branches:
      - '*'
  repository_dispatch:
    types: [hf_minor_merged, minor_master_merged]

jobs:
  branch-sync:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CHAT_WEBHOOK_URL: "https://chat.googleapis.com/v1/spaces/AAAAiN5o6yI/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=V37-y3Z6RgoenZeoHilnzBw9xmYPEI_O0e33MhaqvQA"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git
        run: |
          COMMITTER_NAME=$(git log -1 --pretty=format:'%an')
          COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')
          
          git config --global user.name "$COMMITTER_NAME"
          git config --global user.email "$COMMITTER_EMAIL"
          
          echo "Configured git with user.name=$COMMITTER_NAME and user.email=$COMMITTER_EMAIL"

      - name: Check if direct commit to master
        id: check_direct_commit
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          
          if [ "$branch_name" == "master" ]; then
            echo "Direct commit to master detected."
            echo "DIRECT_COMMIT=true" >> $GITHUB_ENV
          else
            echo "DIRECT_COMMIT=false" >> $GITHUB_ENV
          fi

      - name: Determine branch type
        id: determine_branches
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          
          case "$branch_name" in
            profit_dep_hf_*)
              echo "BRANCH_TYPE=hf" >> $GITHUB_ENV
              ;;
            profit_dep_minor_*)
              echo "BRANCH_TYPE=minor" >> $GITHUB_ENV
              ;;
            *)
              echo "BRANCH_TYPE=none" >> $GITHUB_ENV
              ;;
          esac
          
          echo "Branch Type: $BRANCH_TYPE"

      - name: Fetch and merge branches based on type
        if: env.DIRECT_COMMIT == 'false'
        run: |
          git fetch origin
          branch_name="${GITHUB_REF#refs/heads/}"
          BRANCH_TYPE="${{ steps.determine_branches.outputs.BRANCH_TYPE }}"
          
          if [ "$BRANCH_TYPE" == "hf" ]; then
            latest_minor_branch=$(git branch -r | grep 'origin/profit_dep_minor_' | sed 's/origin\///' | sort -r | head -n 1 | xargs)
            echo "Latest minor branch: $latest_minor_branch"
            
            git checkout $latest_minor_branch
            git merge --no-commit --no-ff origin/$branch_name || true
            
            if git ls-files -u | grep -q .; then
              echo "Merge conflict detected."
              conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
              committer=$(git log -1 --pretty=format:'%an')
              
              message="Merge conflict detected when merging HF into minor.\nConflicting files:\n$conflict_files\nLast committer: $committer"
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL"
              
              exit 1
            fi
            git commit -m "Merge $branch_name into $latest_minor_branch"
            git push origin $latest_minor_branch
            echo "PR_TYPE=hf_to_minor" >> $GITHUB_ENV
            echo "PR_URL=$(gh pr create --title 'Merge $branch_name into $latest_minor_branch' --body 'This PR merges the changes from $branch_name into $latest_minor_branch.' --base $latest_minor_branch --head $branch_name --json url --jq '.url')" >> $GITHUB_ENV
          elif [ "$BRANCH_TYPE" == "minor" ]; then
            git checkout master
            git merge --no-commit --no-ff origin/$branch_name || true
            
            if git ls-files -u | grep -q .; then
              echo "Merge conflict detected."
              conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
              committer=$(git log -1 --pretty=format:'%an')
              
              message="Merge conflict detected when merging minor into master.\nConflicting files:\n$conflict_files\nLast committer: $committer"
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL"
              
              exit 1
            fi
            git commit -m "Merge $branch_name into master"
            git push origin master
            echo "PR_TYPE=minor_to_master" >> $GITHUB_ENV
            echo "PR_URL=$(gh pr create --title 'Merge $branch_name into master' --body 'This PR merges the changes from $branch_name into master.' --base master --head $branch_name --json url --jq '.url')" >> $GITHUB_ENV
          fi

      - name: Wait for PR Merge and Notify
        id: wait_and_notify
        uses: actions/github-script@v6
        with:
          script: |
            const prUrl = process.env.PR_URL;
            if (!prUrl) {
              console.error('PR URL is missing');
              process.exit(1);
            }
            
            let prMerged = false;
            const prNumber = prUrl.split('/').pop();
            while (!prMerged) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (pr.state === 'closed' && pr.merged) {
                prMerged = true;
                const mergeType = process.env.PR_TYPE;
                let message = '';
                if (mergeType === 'hf_to_minor') {
                  message = 'Successfully merged HF into Minor.';
                } else if (mergeType === 'minor_to_master') {
                  message = 'Successfully merged Minor into Master.';
                }
                
                await github.rest.repos.createDispatchEvent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  event_type: mergeType
                });
                
                await github.rest.repos.createDispatchEvent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  event_type: 'next_step'
                });
                
                await github.rest.repos.createDispatchEvent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  event_type: 'notify_merge',
                  client_payload: {
                    message: message
                  }
                });
              } else {
                console.log('Waiting for PR to be merged...');
                await new Promise(resolve => setTimeout(resolve, 60000)); // Wait for 1 minute
              }
            }

      - name: Notify Google Chat on Merge
        if: github.event_name == 'repository_dispatch' && github.event.action == 'notify_merge'
        run: |
          message="${{ github.event.client_payload.message }}"
          echo "Notifying Google Chat: $message"
          curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL"

      - name: Handle Next Steps
        if: github.event_name == 'repository_dispatch' && github.event.action == 'next_step'
        
        run: |
          echo "Handling next steps..."
          # Add your next steps logic here
