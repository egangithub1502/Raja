name: Sync branches with conflict handling

on:
  push:
    branches:
      - '*'

jobs:
  branch-sync:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CHAT_WEBHOOK_URL: "https://chat.googleapis.com/v1/spaces/AAAAiN5o6yI/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=V37-y3Z6RgoenZeoHilnzBw9xmYPEI_O0e33MhaqvQA"
      GH_TOKEN: ${{ secrets.JEGANMERGE }}  # Set GH_TOKEN for GitHub CLI authentication

    permissions:
      issues: write

    steps:
      - name: Create issue using REST API
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.JEGANMERGE }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
            }' \
          --fail

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git
        run: |
          COMMITTER_NAME=$(git log -1 --pretty=format:'%an')
          COMMITTER_EMAIL=$(git log -1 --pretty=format:'%ae')
          
          git config --global user.name "$COMMITTER_NAME"
          git config --global user.email "$COMMITTER_EMAIL"
          
          echo "Configured git with user.name=$COMMITTER_NAME and user.email=$COMMITTER_EMAIL"
      
      - name: Determine branch type
        id: determine_branches
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
    
          echo "Branch name: $branch_name"

          case "$branch_name" in
            profit_dep_hf_*)
              BRANCH_TYPE="hf"
              ;;
            profit_dep_minor_*)
              BRANCH_TYPE="minor"
              ;;
            *)
              BRANCH_TYPE="none"
              ;;
          esac
    
          echo "Branch Type: $BRANCH_TYPE"
          echo "branch_name=$branch_name" >> $GITHUB_ENV
          echo "BRANCH_TYPE=$BRANCH_TYPE" >> $GITHUB_ENV

      - name: Find latest branches by creation date
        run: |
          if [[ "${{ env.BRANCH_TYPE }}" == "hf" ]]; then
            latest_minor_branch=$(git for-each-ref --sort=-committerdate --format="%(refname:short)" refs/remotes/origin/profit_dep_minor_ | head -n 1)
            echo "Latest minor branch: $latest_minor_branch"
            echo "latest_minor_branch=$latest_minor_branch" >> $GITHUB_ENV
          fi

      - name: Create and handle PR
        run: |
          branch_name=${{ env.branch_name }}
          branch_type=${{ env.BRANCH_TYPE }}
          case "$branch_type" in
            hf)
              latest_minor_branch=${{ env.latest_minor_branch }}
              echo "Latest minor branch: $latest_minor_branch"
              git fetch --all
              git checkout $latest_minor_branch
              git merge --no-commit --no-ff origin/$branch_name || true
              if git ls-files -u | grep -q .; then
                echo "Merge conflict detected."
                conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
                committer=$(git log -1 --pretty=format:'%an')
                
                message="Merge conflict detected when merging HF into minor.\nConflicting files:\n$conflict_files\nLast committer: $committer"
                echo "Sending conflict notification to Google Chat..."
                curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                exit 1
              fi
              git checkout $branch_name
              
              echo "Notifying Google Chat about PR creation..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Preparing to create PR: $branch_name into $latest_minor_branch\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              pr_url=$(gh pr create --title "Merge $branch_name into $latest_minor_branch" --body "This PR merges the changes from $branch_name into $latest_minor_branch." --base "$latest_minor_branch" --head "$branch_name" )
              echo "PR URL: $pr_url"
              echo "pr_url=$pr_url" >> $GITHUB_ENV
              
              echo "Posting PR URL to Google Chat..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Pull request created: $pr_url\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              ;;
            minor)
              git fetch --all
              git checkout master
              git merge --no-commit --no-ff origin/$branch_name || true
              if git ls-files -u | grep -q .; then
                echo "Merge conflict detected."
                conflict_files=$(git diff --name-only --diff-filter=U | awk '{print " - " $0}' | tr '\n' '\n')
                committer=$(git log -1 --pretty=format:'%an')
                
                message="Merge conflict detected when merging minor into master.\nConflicting files:\n$conflict_files\nLast committer: $committer"
                echo "Sending conflict notification to Google Chat..."
                curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"$message\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
                exit 1
              fi
              
              echo "Notifying Google Chat about PR creation..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Preparing to create PR: $branch_name into master\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              pr_url=$(gh pr create --title "Merge $branch_name into master" --body "This PR merges the changes from $branch_name into master." --base master --head "$branch_name" )
              echo "PR URL: $pr_url"
              echo "pr_url=$pr_url" >> $GITHUB_ENV
              
              echo "Posting PR URL to Google Chat..."
              curl -X POST -H 'Content-Type: application/json' --data "{\"text\": \"Pull request created: $pr_url\"}" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send message to Google Chat"
              ;;
            *)
              echo "No action required for this branch: $branch_name"
              exit 0
              ;;
          esac
