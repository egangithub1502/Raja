name: List and Deploy Changed Files

on:
  push:
    branches:
      - develop
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  list-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: List latest files merged into develop
        id: list_files
        run: |
          # Fetch the merge commit information
          git fetch --prune --unshallow
          
          # Check if the last commit is a merge commit
          if [ $(git rev-parse --verify HEAD) ]; then
            latest_merge_commit=$(git log -1 --merges --pretty=format:"%H")
            
            # If there's a latest merge commit, list files changed
            if [ -n "$latest_merge_commit" ]; then
              echo "Files changed in the latest merge commit ($latest_merge_commit):"
              git diff-tree --no-commit-id --name-only -r $latest_merge_commit > changed_files.txt
              echo "::set-output name=files::$(cat changed_files.txt)"
            else
              echo "No merge commits found."
              echo "::set-output name=files::"
            fi
          else
            echo "No commits in the current branch."
            echo "::set-output name=files::"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: list-files  # Ensure this job runs after list-files

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files
        id: get_changed_files
        run: |
          echo "Changed files in the merge request:"
          var1="${{ needs.list-files.outputs.files }}"
          echo "$var1" > changed_files.txt
          echo "::set-output name=files::$(cat changed_files.txt)"

      - name: Deploy Changed Files to Remote Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          GIT_PATH: "/home/jegan/git-rsync-en"
          DEPLOY_PATH: "/home/jegan/www_profitokrs_com_6_4_1"
          BACKUP_PATH: "/home/jegan/profit-site-en-backup"
        run: |
          sudo apt-get install -y sshpass
          eval "$(ssh-agent -s)"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          var1="${{ steps.get_changed_files.outputs.files }}"
          var2=$(echo "$var1" | wc -w)
          files1=($var1)
          DATE=$(date +%F-%H-%M)
          echo "Number of Files = $var2"
          echo " "
          for (( i=0; i<$var2; i++ )); do
              if ssh $REMOTE_USER@$REMOTE_HOST "[ -f '$DEPLOY_PATH/${files1[$i]}' ]"; then
                  echo "Backing up $DEPLOY_PATH/${files1[$i]}"
                  ssh $REMOTE_USER@$REMOTE_HOST "sudo cp -r '$DEPLOY_PATH/${files1[$i]}' '$BACKUP_PATH/${files1[$i]}-bak-$DATE'"
              fi
              echo "Deploying ${files1[$i]} to $REMOTE_HOST"
              scp -o StrictHostKeyChecking=no "$GIT_PATH/${files1[$i]}" "$REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/${files1[$i]}"
              ssh $REMOTE_USER@$REMOTE_HOST "sudo chown -R www-data: '$DEPLOY_PATH/${files1[$i]}'; sudo chmod 640 '$DEPLOY_PATH/${files1[$i]}'"
              echo "${files1[$i]} deployed successfully"
          done
