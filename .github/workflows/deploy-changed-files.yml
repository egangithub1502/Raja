name: Deploy on Develop Merge

on:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch all commits
        run: |
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Get changed files
        id: get_changed_files
        run: |
          echo "Changed files since last PR merge:"
          
          # Get the merge commit of the pull request
          pr_commit_sha="${{ github.event.pull_request.merge_commit_sha }}"
          
          # Fetch the last commit in develop
          git fetch origin develop
          last_commit_sha=$(git rev-parse origin/develop)

          # Get changed files between the last commit in develop and the PR merge commit
          changed_files=$(git diff --name-only "$last_commit_sha" "$pr_commit_sha")
          echo "$changed_files" > changed_files.txt
          echo "FILES=$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Deploy Changed Directories to Remote Server
        if: ${{ env.FILES != '' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          GIT_PATH: "/home/jegan/git-rsync-en"
          DEPLOY_PATH: "/home/jegan/www_profitokrs_com_6_4_1"
          BACKUP_PATH: "/home/jegan/profit-site-en-backup"
        run: |
          # Fetch changed files from output
          IFS=$'\n'  # Set internal field separator to newline
          for file_to_deploy in $FILES; do
              directory=$(dirname "$file_to_deploy")
              DATE=$(date +%F-%H-%M)

              echo "Deploying directory $directory to $REMOTE_HOST"
              # Check if the directory exists on the server and back it up
              if ssh $REMOTE_USER@$REMOTE_HOST "[ -d '$DEPLOY_PATH/$directory' ]"; then
                  echo "Backing up $DEPLOY_PATH/$directory"
                  ssh $REMOTE_USER@$REMOTE_HOST "sudo cp -r '$DEPLOY_PATH/$directory' '$BACKUP_PATH/$directory-bak-$DATE'" || { echo "Backup failed"; exit 1; }
              fi

              # Copy the entire directory to the server
              scp -o StrictHostKeyChecking=no -r "$GIT_PATH/$directory" "$REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/$directory" || { echo "Deployment of $directory failed"; exit 1; }
              ssh $REMOTE_USER@$REMOTE_HOST "sudo chown -R www-data: '$DEPLOY_PATH/$directory'; sudo chmod -R 640 '$DEPLOY_PATH/$directory'" || { echo "Permission update failed"; exit 1; }
              echo "$directory deployed successfully"
          done
